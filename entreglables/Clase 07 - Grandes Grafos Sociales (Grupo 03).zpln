{
  "paragraphs": [
    {
      "text": "print(s\"\"\"%html\n\u003ccenter\u003e\n    \u003ch1\u003e\u003ca href\u003d\"http://diplodatos.famaf.unc.edu.ar/\"\u003eDiplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones\u003c/a\u003e\u003c/h1\u003e\n    \u003ch2\u003eCurso \u003ca href\u003d\"https://sites.google.com/view/eleccion-optativas-diplodatos/programaci%C3%B3n-distribu%C3%ADda-sobre-grandes-vol%C3%BAmenes-de-datos\"\u003eProgramación Distribuida sobre Grandes Volúmenes de Datos\u003c/a\u003e\u003c/h2\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h3\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"$baseDir/comun/logo%20UNC%20FAMAF%202016.png\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n\"\"\")\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.279",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ccenter\u003e\n    \u003ch1\u003e\u003ca href\u003d\"http://diplodatos.famaf.unc.edu.ar/\"\u003eDiplomatura en Ciencia de Datos, Aprendizaje Automático y sus Aplicaciones\u003c/a\u003e\u003c/h1\u003e\n    \u003ch2\u003eCurso \u003ca href\u003d\"https://sites.google.com/view/eleccion-optativas-diplodatos/programaci%C3%B3n-distribu%C3%ADda-sobre-grandes-vol%C3%BAmenes-de-datos\"\u003eProgramación Distribuida sobre Grandes Volúmenes de Datos\u003c/a\u003e\u003c/h2\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h3\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases/comun/logo%20UNC%20FAMAF%202016.png\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762278_569317007",
      "id": "20171010-191319_1407757246",
      "dateCreated": "2022-11-13 21:09:22.278",
      "status": "READY"
    },
    {
      "title": "Antes de comenzar",
      "text": "%md\n### Antes de comenzar\n1. Lanzar terminal\n1. Actualizar repo:\n```sh\ncd diplodatos_bigdata\ngit pull\n```\n1. Lanzar [Zeppelin](http://zeppelin.apache.org/) en docker:\n```sh\n./docker/zeppelin.sh\n```\n1. En navegador abrir [http://localhost:8080](http://localhost:8080)\n1. Seleccionar `Import note`\n1. Elegir json en `diplodatos_bigdata/clases/07_grafos/note.zpln`\n2. Seleccionar `Clase 07 - Grandes Grafos Sociales`\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.279",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "title": false,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eAntes de comenzar\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eLanzar terminal\u003c/li\u003e\n\u003cli\u003eActualizar repo:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-sh\"\u003ecd diplodatos_bigdata\ngit pull\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eLanzar \u003ca href\u003d\"http://zeppelin.apache.org/\"\u003eZeppelin\u003c/a\u003e en docker:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-sh\"\u003e./docker/zeppelin.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eEn navegador abrir \u003ca href\u003d\"http://localhost:8080\"\u003ehttp://localhost:8080\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSeleccionar \u003ccode\u003eImport note\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eElegir json en \u003ccode\u003ediplodatos_bigdata/clases/07_grafos/note.zpln\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSeleccionar \u003ccode\u003eClase 07 - Grandes Grafos Sociales\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_951914194",
      "id": "20171026-104737_1316799732",
      "dateCreated": "2022-11-13 21:09:22.279",
      "status": "READY"
    },
    {
      "text": "%md\n# Grandes Grafos Sociales",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.279",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eGrandes Grafos Sociales\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_1792328684",
      "id": "20171101-121050_1177283744",
      "dateCreated": "2022-11-13 21:09:22.279",
      "status": "READY"
    },
    {
      "text": "%md\n## GraphFrames\n\n* Utiliza la interface Spark SQL (Dataframes).\n* Creada por [Databricks](https://databricks.com/).\n* Por ahora no viene en la distribución estandard de Spark (solo [GraphX](http://spark.apache.org/graphx/) sobre RDD\u0027s).\n* Algoritmos ya implementados como: \n    - Breadth-first search (BFS)\n    - Componentes (fuertemente) conexas\n    - Label Propagation Algorithm (para detectar comunidades)\n    - PageRank\n    - Shortest paths\n    - Triangle count.\n* **Agregación de mensajes** para hacer algoritmos.\n* **Motif finding** para queries. \n\n### Documentación:\n\n* [User Guide](https://graphframes.github.io/graphframes/docs/_site/user-guide.html).\n* [User Guide - Python](https://docs.databricks.com/spark/latest/graph-analysis/graphframes/user-guide-python.html).\n* [Documentación de la API](https://graphframes.github.io/graphframes/docs/_site/api/python/index.html).\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.279",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eGraphFrames\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003eUtiliza la interface Spark SQL (Dataframes).\u003c/li\u003e\n  \u003cli\u003eCreada por \u003ca href\u003d\"https://databricks.com/\"\u003eDatabricks\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003ePor ahora no viene en la distribución estandard de Spark (solo \u003ca href\u003d\"http://spark.apache.org/graphx/\"\u003eGraphX\u003c/a\u003e sobre RDD\u0026rsquo;s).\u003c/li\u003e\n  \u003cli\u003eAlgoritmos ya implementados como:\n    \u003cul\u003e\n      \u003cli\u003eBreadth-first search (BFS)\u003c/li\u003e\n      \u003cli\u003eComponentes (fuertemente) conexas\u003c/li\u003e\n      \u003cli\u003eLabel Propagation Algorithm (para detectar comunidades)\u003c/li\u003e\n      \u003cli\u003ePageRank\u003c/li\u003e\n      \u003cli\u003eShortest paths\u003c/li\u003e\n      \u003cli\u003eTriangle count.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eAgregación de mensajes\u003c/strong\u003e para hacer algoritmos.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eMotif finding\u003c/strong\u003e para queries.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentación:\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html\"\u003eUser Guide\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://docs.databricks.com/spark/latest/graph-analysis/graphframes/user-guide-python.html\"\u003eUser Guide - Python\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://graphframes.github.io/graphframes/docs/_site/api/python/index.html\"\u003eDocumentación de la API\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_1735617088",
      "id": "20171102-112550_410534992",
      "dateCreated": "2022-11-13 21:09:22.279",
      "status": "READY"
    },
    {
      "text": "%md\n### Creación de grafo\n\n* Se crean a partir de `DataFrame` de aristas y/o vértices.\n* DataFrame de aristas debe tener las columnas `src` y `dst` (por lo menos).\n* DataFrame de vértices debe tener la columna `id` (por lo menos).\n* Los grafos son dirigidos.\n* Se almacenan con redundancia (vertex cut):\n  ![](http://spark.apache.org/docs/latest/img/edge_cut_vs_vertex_cut.png)\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.279",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eCreación de grafo\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eSe crean a partir de \u003ccode\u003eDataFrame\u003c/code\u003e de aristas y/o vértices.\u003c/li\u003e\n  \u003cli\u003eDataFrame de aristas debe tener las columnas \u003ccode\u003esrc\u003c/code\u003e y \u003ccode\u003edst\u003c/code\u003e (por lo menos).\u003c/li\u003e\n  \u003cli\u003eDataFrame de vértices debe tener la columna \u003ccode\u003eid\u003c/code\u003e (por lo menos).\u003c/li\u003e\n  \u003cli\u003eLos grafos son dirigidos.\u003c/li\u003e\n  \u003cli\u003eSe almacenan con redundancia (vertex cut):\u003cbr/\u003e \u003cimg src\u003d\"http://spark.apache.org/docs/latest/img/edge_cut_vs_vertex_cut.png\" /\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_960549070",
      "id": "20181027-002925_1222103561",
      "dateCreated": "2022-11-13 21:09:22.279",
      "status": "READY"
    },
    {
      "text": "%md\n### Veamos un ejemplo:\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.279",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eVeamos un ejemplo:\u003c/h3\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_923604418",
      "id": "20201030-111511_962191836",
      "dateCreated": "2022-11-13 21:09:22.279",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nfrom graphframes import *\n\n# DataFrame de vértices\nv \u003d spark.createDataFrame([\n  (\"a\", \"Alice\", 34),\n  (\"b\", \"Bob\", 36),\n  (\"c\", \"Charlie\", 30),\n  (\"d\", \"David\", 29),\n  (\"e\", \"Esther\", 32),\n  (\"f\", \"Fanny\", 36),\n  (\"g\", \"Gabby\", 60)\n],[\"id\", \"name\", \"age\"])\n\n# DataFrame de aristas\ne \u003d spark.createDataFrame([\n  (\"a\", \"b\", \"amigo\"),\n  (\"b\", \"c\", \"sigue\"),\n  (\"c\", \"b\", \"sigue\"),\n  (\"f\", \"c\", \"sigue\"),\n  (\"e\", \"f\", \"sigue\"),\n  (\"e\", \"d\", \"amigo\"),\n  (\"d\", \"a\", \"amigo\"),\n  (\"a\", \"e\", \"amigo\"),\n  (\"a\", \"h\", \"amigo\")\n], [\"src\", \"dst\", \"relationship\"])\n\n# Creacion de GraphFrame\ng \u003d GraphFrame(v, e)\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:13:22.816",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_1402925004",
      "id": "20181027-003337_2137373030",
      "dateCreated": "2022-11-13 21:09:22.279",
      "dateStarted": "2022-11-13 21:13:22.833",
      "dateFinished": "2022-11-13 21:13:53.773",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\nz.show(g.vertices)\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:15:05.176",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "editorHide": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 304.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "name": "string",
                      "age": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\tname\tage\na\tAlice\t34\nb\tBob\t36\nc\tCharlie\t30\nd\tDavid\t29\ne\tEsther\t32\nf\tFanny\t36\ng\tGabby\t60\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_1069035080",
      "id": "20181027-004033_1700498403",
      "dateCreated": "2022-11-13 21:09:22.279",
      "dateStarted": "2022-11-13 21:15:05.184",
      "dateFinished": "2022-11-13 21:15:06.583",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\nz.show(g.edges)\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:15:10.926",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "editorHide": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 356.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "src": "string",
                      "dst": "string",
                      "relationship": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "src\tdst\trelationship\na\tb\tamigo\nb\tc\tsigue\nc\tb\tsigue\nf\tc\tsigue\ne\tf\tsigue\ne\td\tamigo\nd\ta\tamigo\na\te\tamigo\na\th\tamigo\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d4"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d5"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_478975207",
      "id": "20181027-004041_1915960464",
      "dateCreated": "2022-11-13 21:09:22.279",
      "dateStarted": "2022-11-13 21:15:10.930",
      "dateFinished": "2022-11-13 21:15:11.347",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\n# Query: Get in-degree of each vertex.\nz.show(g.inDegrees)\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:15:19.944",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "inDegree": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\tinDegree\nf\t1\ne\t1\nh\t1\nd\t1\nc\t2\nb\t2\na\t1\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d6"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d7"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d8"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d9"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d10"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_1907589554",
      "id": "20191205-202553_1454342767",
      "dateCreated": "2022-11-13 21:09:22.279",
      "dateStarted": "2022-11-13 21:15:19.948",
      "dateFinished": "2022-11-13 21:15:23.414",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\n\n# Query: Count the number of \"follow\" connections in the graph.\n\nprint(\"Cantidad de amistades:\", \n        g.edges.filter(\"relationship \u003d \u0027amigo\u0027\").count())\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:15:28.911",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Cantidad de amistades: 5\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d11"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762279_1415254674",
      "id": "20191205-202527_215305701",
      "dateCreated": "2022-11-13 21:09:22.279",
      "dateStarted": "2022-11-13 21:15:28.915",
      "dateFinished": "2022-11-13 21:15:29.489",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### PageRank\n\n#### Se calcula el Page Rank de cada página: $$PR(p_i) \u003d \\frac{\\epsilon}{N} + (1-\\epsilon) \\sum_{p_j \\in M(p_i)} \\frac{PR (p_j)}{L(p_j)}$$\n* donde \\\\(N\\\\) es la cantidad de paginas, \n* \\\\(\\epsilon\\\\) es la probabilidad de quedarse en la pagina (*reset probability*), \n* \\\\(M(p_i)\\\\) son las páginas que apuntan a \\\\(p_i\\\\) y \n* \\\\(L(p_j)\\\\) es la cantidad e links de la página \\\\(p_j\\\\).\n\n\n![](https://bitbucket.org/bigdata_famaf/diplodatos_bigdata/raw/HEAD/clases/00_introduccion/page_rank.png)\n\n\nMás info en [PageRank](https://es.wikipedia.org/wiki/PageRank).",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 22:59:18.985",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003ePageRank\u003c/h3\u003e\n\u003ch4\u003eSe calcula el Page Rank de cada página: $$PR(p_i) \u003d \\frac{\\epsilon}{N} + (1-\\epsilon) \\sum_{p_j \\in M(p_i)} \\frac{PR (p_j)}{L(p_j)}$$\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003edonde \\(N\\) es la cantidad de paginas,\u003c/li\u003e\n\u003cli\u003e\\(\\epsilon\\) es la probabilidad de quedarse en la pagina (\u003cem\u003ereset probability\u003c/em\u003e),\u003c/li\u003e\n\u003cli\u003e\\(M(p_i)\\) son las páginas que apuntan a \\(p_i\\) y\u003c/li\u003e\n\u003cli\u003e\\(L(p_j)\\) es la cantidad e links de la página \\(p_j\\).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://bitbucket.org/bigdata_famaf/diplodatos_bigdata/raw/HEAD/clases/00_introduccion/page_rank.png\" alt\u003d\"\" /\u003e\u003c/p\u003e\n\u003cp\u003eMás info en \u003ca href\u003d\"https://es.wikipedia.org/wiki/PageRank\"\u003ePageRank\u003c/a\u003e.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1662493640",
      "id": "paragraph_1634844119648_1955861883",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "title": "PageRank",
      "text": "%pyspark\n\n# Run PageRank algorithm, and show results.\nresults \u003d g.pageRank(resetProbability\u003d0.01, maxIter\u003d10)\n\nz.show(results.vertices.select(\"id\", \"pagerank\"))\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:33:55.985",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": false,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "id0",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "pagerank1",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 0.0,
                          "direction": "desc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "pagerank": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\tpagerank\ng\t0.011647254575707162\nb\t3.6199424699159937\ne\t0.03848486478566412\na\t0.05421739436354941\nf\t0.0347707909956736\nd\t0.0347707909956736\nc\t3.206166434367738\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d18"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d19"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d20"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d21"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d22"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d23"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d24"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d25"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d26"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d27"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d28"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d29"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d30"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d31"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d32"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d33"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d34"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d35"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d36"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_454462772",
      "id": "20191205-202719_809801770",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:31:43.726",
      "dateFinished": "2022-11-13 21:33:10.960",
      "status": "FINISHED"
    },
    {
      "title": "Guardemos el grafo",
      "text": "%pyspark\nfrom pyspark.sql.functions import col\n\ng.edges.printSchema()\n\ng.edges \\\n        .select(col(\"src\").alias(\"Source\"), \n                col(\"dst\").alias(\"Target\"), \n                \"relationship\") \\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"g_edges.csv\", mode\u003d\"overwrite\", header\u003dTrue)\n\n# Ver que pasa sin coalesce",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:27:10.259",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- src: string (nullable \u003d true)\n |-- dst: string (nullable \u003d true)\n |-- relationship: string (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d12"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_83255489",
      "id": "20201029-163912_1652236873",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:27:10.262",
      "dateFinished": "2022-11-13 21:27:11.490",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Ejemplo Red de Usuarios Twitter",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.280",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eEjemplo Red de Usuarios Twitter\u003c/h2\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_966246206",
      "id": "20181024-105040_178046617",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "title": "Load Tweets",
      "text": "%pyspark\n\ntweets \u003d spark.read.parquet(\"../../diplodatos_bigdata/ds/tweets.pqt\")\n\nprint(\"Cantidad de tweets:\", tweets.count())\n\nz.show(tweets.limit(10))\n# RT_times es la cantidad de veces que el usuario retweeteo el tweet\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:27:22.436",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "timestamp": "string",
                      "user": "string",
                      "RT_by": "string",
                      "RT_times": "string",
                      "text": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Cantidad de tweets: 172040\n\n"
          },
          {
            "type": "TABLE",
            "data": "timestamp\tuser\tRT_by\tRT_times\ttext\n1487970896\tierrejon\tteresapititesa\t2\tRT @ierrejon: Aulas masificadas, falta de profesorado, precariedad laboral para docentes... ¿Así pretende el PP garantizar el fut…\n1487971010\tRobiBaradel\titoferrero\t1\tRT @RobiBaradel: Nos parece muy sano que los ciudadanos sumen su tiempo y su compromiso a la Educación Pública, los esperamos todo e…\n1487971052\tvilma_ripoll\tPabloIannuzzi\t3\tRT @vilma_ripoll: Los \"voluntarios\"contra el paro docente, son carneros. Los docentes defienden su salario y la escuela pública. Apoyemos e…\n1487971121\tfargosi\tPiaAsao\t3\tRT @fargosi: Hay otros medios de protesta. Las huelgas docentes son inconstitucionales por las convenciones de Derechos del Niño. Jueces, a…\n1487971177\tGFrondizi\ttepergmailcomP1\t3\tRT @GFrondizi: Pido algún fiscal por incumplimiento del deber de educar a los niños de la nación Pena con cárcel p baradel Exijo q…\n1487971184\tRobiBaradel\tAnaliavc1\t41\tRT @RobiBaradel: Nos parece muy sano que los ciudadanos sumen su tiempo y su compromiso a la Educación Pública, los esperamos todo e…\n1487971345\tSuperSecretario\tari2271\t12\tRT @SuperSecretario: #Cambiemos sacó solo 1,5% pq en su spot no prometió Voluntarios para reemplazar Docentes. Si se avivaban arrasaban!  h…\n1487971368\tMarinaVolpe12\tBocaLocura312\t1\tRT @MarinaVolpe12: No se ofrezcan nunca como Médicos voluntarios.Si hacen como MM, te saca el hígado y pide disculpas xq se equivovó #Volun…\n1487971408\tlanacionmas\tsusanamartimari\t2\tRT @lanacionmas: ¿Qué opinás de la propuesta #VoluntarioDocenteNoAlParo que se generó en las redes sociales a partir del paro nacional? #La…\n1487971469\taeronauticosCFK\tandrea7533\t17\tRT @aeronauticosCFK: #ApoyoALosMaestros Para estas cosas sobra la guita. Son patéticos https://t.co/6BW6eGZYpT\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d13"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d14"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d15"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1800409716",
      "id": "20171101-124010_495006264",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:27:22.439",
      "dateFinished": "2022-11-13 21:27:23.819",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Definición de la red de usuarios:\n\n* Queremos que un **usuario A esté conectado con usuario B** si B retweeteó un mensaje de A.\n* Queremos también la cantidad de retweets que hizo B de mensajes de A **distintos o no**.",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.280",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eDefinición de la red de usuarios:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eQueremos que un \u003cstrong\u003eusuario A esté conectado con usuario B\u003c/strong\u003e si B retweeteó un mensaje de A.\u003c/li\u003e\n\u003cli\u003eQueremos también la cantidad de retweets que hizo B de mensajes de A \u003cstrong\u003edistintos o no\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1958897356",
      "id": "20181024-111922_1953182558",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "title": "Generamos las conecciones por usuarios",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import sum, count\n\ntwitterConnections \u003d tweets \\\n                        .groupBy(\"user\", \"RT_by\") \\\n                        .agg(sum(\"RT_times\").alias(\"count_RT\"), count(\"*\").alias(\"count_distinct_RT\"))\n\nprint(\"Cantidad de conexiones:\", twitterConnections.count())\n\nz.show(twitterConnections.limit(20))\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:34:57.777",
      "progress": 12,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "user": "string",
                      "RT_by": "string",
                      "count_RT": "string",
                      "count_distinct_RT": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "user": "string",
                      "RT_by": "string",
                      "count_RT": "string",
                      "count_distinct_RT": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Cantidad de conexiones: 152613\n\n"
          },
          {
            "type": "TABLE",
            "data": "user\tRT_by\tcount_RT\tcount_distinct_RT\nWolffWaldo\txenia43sailor\t69\t1\natlanticsurff\tpaulobeni\t8\t1\nRuben_Rischmann\tPPperonoelsapo\t23\t1\nWolffWaldo\tMariePes72\t14\t1\nromerodiario\tRcaRawson\t4\t1\npablen2012\tNattyJuliAle\t4\t1\nMaestroPortenio\tsamuelevyARG\t14\t1\nLaAlfareraOk\taka_Mister\t33\t1\nertenembaum\tfertso\t4\t1\nBrujaUniversal\tO_Fer_\t6\t1\nmis2centavos\tmapolo1978\t2\t1\nlucaslauriente\t_Felpa_\t1\t1\nPajaritaTW\toscarcapellini\t6\t1\nArgentinaSoy1\t88lamaga\t82\t1\nel_telegrafo\tamaia78\t1\t1\nDEM___\taquisiclaudia\t79\t1\nLauraadri\tarturomakko\t12\t1\nscorohernan\tgustavospektor\t6\t1\nCondenaNacional\tSyl_Vicious\t3\t1\nhanalfabeto\tOsvaM55\t18\t2\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d37"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d38"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1759539785",
      "id": "20171101-121958_1394663112",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:34:57.780",
      "dateFinished": "2022-11-13 21:34:59.923",
      "status": "FINISHED"
    },
    {
      "title": "Hay que renombrar las conexiones de tweeter:",
      "text": "%pyspark\n\nfrom pyspark.sql.functions import col\n\nedgesDF \u003d twitterConnections \\\n    .select(col(\"user\").alias(\"src\"), \n            col(\"RT_by\").alias(\"dst\"),\n            \"count_RT\", \"count_distinct_RT\")\n                                       \nz.show(edgesDF.limit(10))\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:36:06.557",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "src": "string",
                      "dst": "string",
                      "count_RT": "string",
                      "count_distinct_RT": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "src\tdst\tcount_RT\tcount_distinct_RT\nWolffWaldo\txenia43sailor\t69\t1\natlanticsurff\tpaulobeni\t8\t1\nRuben_Rischmann\tPPperonoelsapo\t23\t1\nWolffWaldo\tMariePes72\t14\t1\nromerodiario\tRcaRawson\t4\t1\npablen2012\tNattyJuliAle\t4\t1\nMaestroPortenio\tsamuelevyARG\t14\t1\nLaAlfareraOk\taka_Mister\t33\t1\nertenembaum\tfertso\t4\t1\nBrujaUniversal\tO_Fer_\t6\t1\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d39"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_599167814",
      "id": "20171101-124136_101875926",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:36:06.561",
      "dateFinished": "2022-11-13 21:36:07.029",
      "status": "FINISHED"
    },
    {
      "title": "Hay que crear el DF de vértices",
      "text": "%pyspark\n\nsrcs \u003d edgesDF.select(col(\"src\").alias(\"id\"))\n\ndsts \u003d edgesDF.select(col(\"dst\").alias(\"id\"))\n    \nvertexDF \u003d srcs.unionAll(dsts).distinct()\n\nz.show(vertexDF.limit(10))\n    ",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:36:57.877",
      "progress": 95,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\nElGorilaje\nflordecaribe\nl_p_o\nPiru_laura\nbudano_ignacio\nRepettoLidia\nLilianaTren\ndefensoria_bol\nMIGUE67MIGUE\ncarlito60322427\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d40"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1562650172",
      "id": "20191206-163757_2138250663",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:36:57.880",
      "dateFinished": "2022-11-13 21:37:05.791",
      "status": "FINISHED"
    },
    {
      "title": "Creación de GraphFrame:",
      "text": "%pyspark\n\nfrom graphframes import *\n\ngraph \u003d GraphFrame(vertexDF, edgesDF).cache()\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:37:41.511",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1085111004",
      "id": "20171101-124739_82230555",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:37:41.515",
      "dateFinished": "2022-11-13 21:37:41.781",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Operaciones básicas sobre grafos\n\n#### A continuación veremos como calcular: \n* la cantidad de vértices (usuarios)\n* la cantidad de arístas (conexiones)\n* el grado de cada vértice (cantidad de conexiones por usuario)",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.280",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eOperaciones básicas sobre grafos\u003c/h3\u003e\n\u003ch4\u003eA continuación veremos como calcular:\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003ela cantidad de vértices (usuarios)\u003c/li\u003e\n  \u003cli\u003ela cantidad de arístas (conexiones)\u003c/li\u003e\n  \u003cli\u003eel grado de cada vértice (cantidad de conexiones por usuario)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1183697425",
      "id": "20171102-153102_880120870",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "title": "Tamaño del grafo",
      "text": "%pyspark\n\nverticesCount \u003d graph.vertices.count()\n\nedgesCount \u003d graph.edges.count()\n\nprint(f\"\"\"%table\nCantidad de usuarios \\t Cantidad de conexiones\n{verticesCount} \\t {edgesCount}\"\"\")\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:38:57.312",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "Cantidad de usuarios ": "string",
                      " Cantidad de conexiones": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Cantidad de usuarios \t Cantidad de conexiones\n57138 \t 152613\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d43"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d44"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_2043657090",
      "id": "20171101-124845_773490911",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:38:55.396",
      "dateFinished": "2022-11-13 21:38:56.072",
      "status": "FINISHED"
    },
    {
      "title": "Cantidad de conexiones por usuario",
      "text": "%pyspark\n\nnodesDegree \u003d graph.degrees\n\nsortedByDegree \u003d nodesDegree.orderBy(\"degree\", ascending\u003dFalse)\n\nz.show(sortedByDegree.limit(10))\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:39:57.770",
      "progress": 83,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "degree": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\tdegree\nWinston_Dunhill\t2325\nfernandocarnota\t1745\nsantosjorgeh\t1657\nlanatoparatodos\t1529\nRobiBaradel\t1483\nJorgeFavaloro\t1483\nelcoya1977\t1471\neldestapeweb\t1441\nlucaslauriente\t1422\nbetovaldez\t1407\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d45"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1976844425",
      "id": "20171102-131720_1147432214",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:39:57.773",
      "dateFinished": "2022-11-13 21:40:03.211",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Ejemplo Agregación de Mensajes\n\n### Influencia Colectiva\n\n#### Aplicaciones: \n* Marketing viral (influencia de opinión)\n* Detección de focos de dispersión de enfermedades\n* ...\n\n#### Cómo funciona:\n* Primero se calcula la **Influencia Colectiva (CI)**\n* En cada iteración elimina del grafo el nodo de mayor CI y recalcula el CI de los nodos restantes\n* Termina cuando la componente gigante se destruye\n* Solución básica: \\\\(O(N2)\\\\). Optimizada: \\\\(O(NlogN)\\\\)\n\n\u003e Influence maximization in complex networks through optimal percolation” (Flaviano Morone, Hernán A. Makse, 27 Jun 2015) https://arxiv.org/abs/1506.08326\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.280",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eEjemplo Agregación de Mensajes\u003c/h2\u003e\n\u003ch3\u003eInfluencia Colectiva\u003c/h3\u003e\n\u003ch4\u003eAplicaciones:\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003eMarketing viral (influencia de opinión)\u003c/li\u003e\n  \u003cli\u003eDetección de focos de dispersión de enfermedades\u003c/li\u003e\n  \u003cli\u003e\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eCómo funciona:\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003ePrimero se calcula la \u003cstrong\u003eInfluencia Colectiva (CI)\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003eEn cada iteración elimina del grafo el nodo de mayor CI y recalcula el CI de los nodos restantes\u003c/li\u003e\n  \u003cli\u003eTermina cuando la componente gigante se destruye\u003c/li\u003e\n  \u003cli\u003eSolución básica: \\(O(N2)\\). Optimizada: \\(O(NlogN)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eInfluence maximization in complex networks through optimal percolation” (Flaviano Morone, Hernán A. Makse, 27 Jun 2015) \u003ca href\u003d\"https://arxiv.org/abs/1506.08326\"\u003ehttps://arxiv.org/abs/1506.08326\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_2095211727",
      "id": "20171102-132006_1774167041",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "text": "%md\n### Fórmula de CI\n\nLa formula de collective influence para un vértice \\\\(i\\\\) es:\n\n$$ CI(i) \u003d (degree_i -  1) \\times \\sum\\limits_{j \\in vecinos(i)} (degree_j -  1)$$\n\nSe supone un grafo **no dirigido**.\n\n### Pasos para calcular collective influence son:\n\n* agregar el grado (degree) de cada nodo al grafo.\n* importar `AggregateMessages`.\n* calcular collective influence de cada individuo usando `AggregateMessages` de `GraphFrame`\n* ordenar los individuos por su collective influence de mayor a menor\n* imprimir el listado de individuos\n\n\n#### Documentación para implementar con GraphFrames:\n\n* Documentación sobre [AggregateMessages](https://graphframes.github.io/graphframes/docs/_site/user-guide.html#message-passing-via-aggregatemessages) con ejemplo.\n* Documentación de [API AggregateMessages](https://graphframes.github.io/graphframes/docs/_site/api/python/graphframes.html).\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:41:59.139",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eFórmula de CI\u003c/h3\u003e\n\u003cp\u003eLa formula de collective influence para un vértice \\(i\\) es:\u003c/p\u003e\n\u003cp\u003e$$ CI(i) \u003d (degree_i - 1) \\times \\sum\\limits_{j \\in vecinos(i)} (degree_j - 1)$$\u003c/p\u003e\n\u003cp\u003eSe supone un grafo \u003cstrong\u003eno dirigido\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3\u003ePasos para calcular collective influence son:\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eagregar el grado (degree) de cada nodo al grafo.\u003c/li\u003e\n  \u003cli\u003eimportar \u003ccode\u003eAggregateMessages\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003ecalcular collective influence de cada individuo usando \u003ccode\u003eAggregateMessages\u003c/code\u003e de \u003ccode\u003eGraphFrame\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eordenar los individuos por su collective influence de mayor a menor\u003c/li\u003e\n  \u003cli\u003eimprimir el listado de individuos\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eDocumentación para implementar con GraphFrames:\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003eDocumentación sobre \u003ca href\u003d\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html#message-passing-via-aggregatemessages\"\u003eAggregateMessages\u003c/a\u003e con ejemplo.\u003c/li\u003e\n  \u003cli\u003eDocumentación de \u003ca href\u003d\"https://graphframes.github.io/graphframes/docs/_site/api/python/graphframes.html\"\u003eAPI AggregateMessages\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1457709991",
      "id": "20171102-131904_821311339",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import sum\nfrom graphframes.lib import AggregateMessages as AM\n\n#Creo un nuevo grafo con los nodos y su degree (disponible en nodesDegree) y las aristas originales\ndegreeGraph \u003d GraphFrame(nodesDegree, graph.edges )\n# Aristas y vértices están bien particionadas\n\n\n# Comenzamos a calcular CI \n\n# Cada nodo envia su degree-1 a sus vecinos a traves de sus conecciones salientes y entrantes\nmsgToDst \u003d AM.src[\"degree\"] - 1\nmsgToSrc \u003d AM.dst[\"degree\"] - 1\n\n# El DataFrame sumNeighborDegrees debe tener 2 columnas: id del nodo y sum_neighbor_degree \nsumNeighborDegrees \u003d degreeGraph.aggregateMessages(\n    sum(AM.msg).alias(\"sum_neighbor_degree\"), # Hace aggregation en cada nodo sobre los mensages recibidos \n    sendToDst\u003dmsgToDst, # Envia a vecino por coneccion saliente\n    sendToSrc\u003dmsgToSrc) # Envia a vecino por coneccion entrante\n\n\n# Join de sumNeighborDegrees con degrees para tener todas las columnas necesarias para calcular CI.\n\nnodesDegreeJoin \u003d nodesDegree.join(sumNeighborDegrees,\"id\")\n\n# Calculamos CI: para terminar de calcularlo debemos multiplicar la sumatoria del paso anterior por degree - 1 de cada nodo.\n# El DataFrame collectiveInfluence debe tener 3 columnas: id, ci y degree\n# Por ultimo ordena descendentemente por ci \n\ncollectiveInfluence \u003d nodesDegreeJoin \\\n                          .select( ((col(\"degree\") - 1) * col(\"sum_neighbor_degree\")).alias(\"ci\"), \n                                    \"id\", \n                                    \"degree\") \\\n                          .orderBy(\"ci\", ascending\u003dFalse) \\\n                          .cache()\n\nz.show(collectiveInfluence.limit(20))\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:42:24.519",
      "progress": 31,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "ci": "string",
                      "id": "string",
                      "degree": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "ci\tid\tdegree\n71551312\tWinston_Dunhill\t2325\n57822552\tsantosjorgeh\t1657\n55026688\tfernandocarnota\t1745\n45848634\tJorgeFavaloro\t1483\n42052088\tlanatoparatodos\t1529\n37856910\telcoya1977\t1471\n33925374\tbetovaldez\t1407\n31175045\tLaBelgrana\t606\n30129480\tfargosi\t1271\n29494764\tRobiBaradel\t1483\n27043120\tcopi__\t1041\n23379462\tNunkMasKs\t1027\n18770024\tConCiencia2015\t533\n17316472\tWolffWaldo\t812\n16165470\tHugoYasky\t987\n15975882\tmis2centavos\t1020\n15693120\teldestapeweb\t1441\n15118908\tCarlos_AD_Viola\t533\n14284499\tCTAok\t830\n14149350\tEdgardoRovira\t1176\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d46"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d47"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d48"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d49"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d50"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d51"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1364394370",
      "id": "20171101-125025_1054455316",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:42:24.524",
      "dateFinished": "2022-11-13 21:42:59.838",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Motif Finding\n\n* Es un Domain-Specific Language (DSL) para expresar queries.\n* La unidad básica es la expresión de una arista\n\n### Ejemplos\n\n* `graph.find(\"(a)-[e]-\u003e(b); (b)-[e2]-\u003e(a)\")` expresa vértices unidos en ambas direcciones.\n    - Devuelve un DataFrame con columnas `\"a\"`, `\"b\"`, `\"e\"` y `\"e2\"`.\n* `graph.find(\"(a)-[e]-\u003e(b); (b)-[e2]-\u003e(c)\")` expresa dos aristas pegadas con un vértice común `b`. \n\n### Documentacion y ejemplo\n\n* [GraphFrame User Guide](https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding).\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.280",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eMotif Finding\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003eEs un Domain-Specific Language (DSL) para expresar queries.\u003c/li\u003e\n  \u003cli\u003eLa unidad básica es la expresión de una arista\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eEjemplos\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003egraph.find(\u0026quot;(a)-[e]-\u0026gt;(b); (b)-[e2]-\u0026gt;(a)\u0026quot;)\u003c/code\u003e expresa vértices unidos en ambas direcciones.\n    \u003cul\u003e\n      \u003cli\u003eDevuelve un DataFrame con columnas \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;e\u0026quot;\u003c/code\u003e y \u003ccode\u003e\u0026quot;e2\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003egraph.find(\u0026quot;(a)-[e]-\u0026gt;(b); (b)-[e2]-\u0026gt;(c)\u0026quot;)\u003c/code\u003e expresa dos aristas pegadas con un vértice común \u003ccode\u003eb\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentacion y ejemplo\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding\"\u003eGraphFrame User Guide\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1415240303",
      "id": "20181027-013740_419047675",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "text": "%md\n### Recordemos el grafo",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.280",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eRecordemos el grafo\u003c/h3\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1554091238",
      "id": "paragraph_1634934672760_445886262",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "text": "%pyspark\nz.show(g.vertices)",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:46:57.901",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "name": "string",
                      "age": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\tname\tage\na\tAlice\t34\nb\tBob\t36\nc\tCharlie\t30\nd\tDavid\t29\ne\tEsther\t32\nf\tFanny\t36\ng\tGabby\t60\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d52"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d53"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d54"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_22980628",
      "id": "paragraph_1634934258381_857174466",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:46:57.904",
      "dateFinished": "2022-11-13 21:46:58.322",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nz.show(g.edges)",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:47:07.772",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "src": "string",
                      "dst": "string",
                      "relationship": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "src\tdst\trelationship\na\tb\tamigo\nb\tc\tsigue\nc\tb\tsigue\nf\tc\tsigue\ne\tf\tsigue\ne\td\tamigo\nd\ta\tamigo\na\te\tamigo\na\th\tamigo\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d55"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d56"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d57"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1723378599",
      "id": "paragraph_1634934349934_2020230166",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:47:04.921",
      "dateFinished": "2022-11-13 21:47:05.289",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Hagamos algunos queries",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.280",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eHagamos algunos queries\u003c/h3\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1469739204",
      "id": "paragraph_1634934687488_918172403",
      "dateCreated": "2022-11-13 21:09:22.280",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\n# Buscar pares de vértices en ambas direccione:\nmotifs \u003d g.find(\"(a)-[e1]-\u003e(b); (b)-[e2]-\u003e(a)\")\n\nmotifs.printSchema()\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:47:18.929",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- a: struct (nullable \u003d false)\n |    |-- id: string (nullable \u003d true)\n |    |-- name: string (nullable \u003d true)\n |    |-- age: long (nullable \u003d true)\n |-- e1: struct (nullable \u003d false)\n |    |-- src: string (nullable \u003d true)\n |    |-- dst: string (nullable \u003d true)\n |    |-- relationship: string (nullable \u003d true)\n |-- b: struct (nullable \u003d false)\n |    |-- id: string (nullable \u003d true)\n |    |-- name: string (nullable \u003d true)\n |    |-- age: long (nullable \u003d true)\n |-- e2: struct (nullable \u003d false)\n |    |-- src: string (nullable \u003d true)\n |    |-- dst: string (nullable \u003d true)\n |    |-- relationship: string (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_444399252",
      "id": "20181027-015100_1394496292",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:47:18.933",
      "dateFinished": "2022-11-13 21:47:19.149",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\nz.show(motifs)\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:47:38.359",
      "progress": 3,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a": "string",
                      "e1": "string",
                      "b": "string",
                      "e2": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a\te1\tb\te2\n[c,Charlie,30]\t[c,b,sigue]\t[b,Bob,36]\t[b,c,sigue]\n[b,Bob,36]\t[b,c,sigue]\t[c,Charlie,30]\t[c,b,sigue]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d58"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d59"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d60"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d61"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d62"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_1690469035",
      "id": "20181027-015533_344573808",
      "dateCreated": "2022-11-13 21:09:22.280",
      "dateStarted": "2022-11-13 21:47:38.362",
      "dateFinished": "2022-11-13 21:47:41.006",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n# Despues se pueden aplicar filtros para queries mas complejos.\nz.show(motifs.filter(\"b.age \u003e 30\"))\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:48:11.630",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a": "string",
                      "e1": "string",
                      "b": "string",
                      "e2": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a\te1\tb\te2\n[c,Charlie,30]\t[c,b,sigue]\t[b,Bob,36]\t[b,c,sigue]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d63"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d64"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d65"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d66"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d67"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762280_519761413",
      "id": "20201030-112416_1681452862",
      "dateCreated": "2022-11-13 21:09:22.281",
      "dateStarted": "2022-11-13 21:48:11.634",
      "dateFinished": "2022-11-13 21:48:13.826",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Visualización\n\nA continuación visualizaremos con [Gephi](https://gephi.org/) la parte del grafo (subgrafo) que contiene los mayores influencers.\n\nPara ello generaremos archivos *csv* como entrada de esta herramienta ",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.281",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eVisualización\u003c/h2\u003e\n\u003cp\u003eA continuación visualizaremos con \u003ca href\u003d\"https://gephi.org/\"\u003eGephi\u003c/a\u003e la parte del grafo (subgrafo) que contiene los mayores influencers.\u003c/p\u003e\n\u003cp\u003ePara ello generaremos archivos \u003cem\u003ecsv\u003c/em\u003e como entrada de esta herramienta\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_2003977243",
      "id": "20171102-160936_360694508",
      "dateCreated": "2022-11-13 21:09:22.281",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\nminCI \u003d 29000000\nminDegree \u003d 600\n\n# tomo los usarios con mayor influencia o con más conecciones\nciTops \u003d collectiveInfluence \\\n    .filter((col(\"ci\") \u003e\u003d minCI) | (col(\"degree\") \u003e\u003d minDegree))\n\ngInfluencers \u003d GraphFrame(ciTops, graph.edges)\n\n# Tomo solo las aristas que tengan vértices\nveTops \u003d gInfluencers.find(\"(a)-[e]-\u003e(b)\") \\\n                .cache()\n      \n                \nprint(\"Cantidad de top influencers:\", veTops.count())\n\nveTops.printSchema()\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:49:24.229",
      "progress": 57,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a": "string",
                      "e": "string",
                      "b": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Cantidad de top influencers: 35\nroot\n |-- a: struct (nullable \u003d false)\n |    |-- ci: long (nullable \u003d true)\n |    |-- id: string (nullable \u003d true)\n |    |-- degree: integer (nullable \u003d false)\n |-- e: struct (nullable \u003d false)\n |    |-- src: string (nullable \u003d true)\n |    |-- dst: string (nullable \u003d true)\n |    |-- count_RT: long (nullable \u003d true)\n |    |-- count_distinct_RT: long (nullable \u003d false)\n |-- b: struct (nullable \u003d false)\n |    |-- ci: long (nullable \u003d true)\n |    |-- id: string (nullable \u003d true)\n |    |-- degree: integer (nullable \u003d false)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d68"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d69"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d70"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_1743483176",
      "id": "20171102-000354_1806019706",
      "dateCreated": "2022-11-13 21:09:22.281",
      "dateStarted": "2022-11-13 21:49:24.233",
      "dateFinished": "2022-11-13 21:49:25.914",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\neTops \u003d veTops.select(\"e.*\")\n\neTops.printSchema()\n\n# Grafo de los tops\ngTops \u003d GraphFrame(ciTops, eTops)\n\n\n# guardo un csv con los vertices para Gephi\n# Label es igual a la id\ngTops.vertices \\\n        .select(\"*\", col(\"id\").alias(\"Label\")) \\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"logs/top_influencers.csv\", mode\u003d\"overwrite\", header\u003dTrue)\n\n# guardo un csv con las aristas para Gephi\ngTops.edges \\\n        .select(col(\"src\").alias(\"Source\"), \n                col(\"dst\").alias(\"Target\"), \n                \"count_RT\",\"count_distinct_RT\") \\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"logs/top_edges.csv\", mode\u003d\"overwrite\", header\u003dTrue)\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:50:08.392",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- src: string (nullable \u003d true)\n |-- dst: string (nullable \u003d true)\n |-- count_RT: long (nullable \u003d true)\n |-- count_distinct_RT: long (nullable \u003d false)\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d71"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d72"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_613815618",
      "id": "20181027-020144_852191582",
      "dateCreated": "2022-11-13 21:09:22.281",
      "dateStarted": "2022-11-13 21:50:08.395",
      "dateFinished": "2022-11-13 21:50:09.062",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Gephi\n\nLanzar el programa desde una terminal ejecutando:\n\n```sh\ngephi-0.9.2/bin/gephi\n```\n\nSeguir las instrucciones del profesor.",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.281",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eGephi\u003c/h3\u003e\n\u003cp\u003eLanzar el programa desde una terminal ejecutando:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-sh\"\u003egephi-0.9.2/bin/gephi\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSeguir las instrucciones del profesor.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_680215299",
      "id": "20171102-161414_1207858851",
      "dateCreated": "2022-11-13 21:09:22.281",
      "status": "READY"
    },
    {
      "text": "%md\n### Ejercicio\n\nComplete el siguiente programa para calcular el grafo de todas las conexiones hacia los 8 mayores influenciadores (influencia colectiva) y graficar el resultado con Gephi. \n\n#### Ayuda\n* Busque en la documentación [Api Datasets](https://spark.apache.org/docs/2.4.8/api/python/pyspark.sql.html#pyspark.sql.DataFrame) algún método que devuelva las *n* primeras files de un Dataset equivalente a la directiva SQL `LIMIT`. \n* Para llenar el comando `find` busque la documentación de [Motif finding](https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding).",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:50:59.027",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eEjercicio\u003c/h3\u003e\n\u003cp\u003eComplete el siguiente programa para calcular el grafo de todas las conexiones hacia los 8 mayores influenciadores (influencia colectiva) y graficar el resultado con Gephi.\u003c/p\u003e\n\u003ch4\u003eAyuda\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBusque en la documentación \u003ca href\u003d\"https://spark.apache.org/docs/2.4.8/api/python/pyspark.sql.html#pyspark.sql.DataFrame\"\u003eApi Datasets\u003c/a\u003e algún método que devuelva las \u003cem\u003en\u003c/em\u003e primeras files de un Dataset equivalente a la directiva SQL \u003ccode\u003eLIMIT\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePara llenar el comando \u003ccode\u003efind\u003c/code\u003e busque la documentación de \u003ca href\u003d\"https://graphframes.github.io/graphframes/docs/_site/user-guide.html#motif-finding\"\u003eMotif finding\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_490066073",
      "id": "20171102-110542_600666434",
      "dateCreated": "2022-11-13 21:09:22.281",
      "status": "READY"
    },
    {
      "text": "%pyspark\n\ntopInfluencers \u003d collectiveInfluence.orderBy(\"ci\", ascending\u003dFalse).limit(8) # solo los 8 primeros\n\ngTops2 \u003d GraphFrame(topInfluencers, graph.edges)\n\n# Solo las aristas que van los tops\nres1 \u003d gTops2.find(\"()-[e]-\u003e(a)\")  # Dejamos la primer arista vacía simbolizando que puede ser cualquier arista, y (a) para denotar los tops de gTops2\n\neTops2 \u003d res1.select(\"e.src\", \"e.dst\")\n\n# Junto todos los vertices de las aristas\nvTops2s \u003d eTops2.select(col(\"src\").alias(\"id\"))\nvTops2d \u003d eTops2.select(col(\"dst\").alias(\"id\"))\nvTops2sd \u003d vTops2s.union(vTops2d)\n\nvTops2 \u003d vTops2sd.join(collectiveInfluence, \u0027id\u0027, \"left\").distinct()\n\nvTops2.select(\"*\", col(\"id\").alias(\"Label\"))\\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"logs/top_influencers2.csv\", mode\u003d\"overwrite\", header\u003dTrue)\n\n\neTops2.withColumnRenamed(\"src\", \"Source\")\\\n    .withColumnRenamed(\"dst\", \"Target\")\\\n    .coalesce(1) \\\n    .write \\\n    .csv(\"logs/top_edges2.csv\", mode\u003d\"overwrite\", header\u003dTrue)\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 22:17:30.402",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 14.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d84"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d85"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d86"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d87"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d88"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_594543543",
      "id": "paragraph_1666384803023_696454822",
      "dateCreated": "2022-11-13 21:09:22.281",
      "dateStarted": "2022-11-13 22:17:30.405",
      "dateFinished": "2022-11-13 22:17:35.232",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Ejercicio\n\n0. Tomar el grafo de tweets y crear un dataframe con todas las aristas y vértices que forman triángulos dirigidos. O sea, todos los casos donde un usuario *A* retuitea a *B* que retuitea a *C* que retuitea a *A*.\n\n0. Hay casos donde los tres usuarios sean distintos?\n\n0. Graficar con Gephi el resultado.\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.281",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 12.0,
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eEjercicio\u003c/h3\u003e\n\u003col\u003e\n  \u003cli\u003e\n  \u003cp\u003eTomar el grafo de tweets y crear un dataframe con todas las aristas y vértices que forman triángulos dirigidos. O sea, todos los casos donde un usuario \u003cem\u003eA\u003c/em\u003e retuitea a \u003cem\u003eB\u003c/em\u003e que retuitea a \u003cem\u003eC\u003c/em\u003e que retuitea a \u003cem\u003eA\u003c/em\u003e.\u003c/p\u003e\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eHay casos donde los tres usuarios sean distintos?\u003c/p\u003e\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eGraficar con Gephi el resultado.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_1136451970",
      "id": "20201030-122513_420199213",
      "dateCreated": "2022-11-13 21:09:22.281",
      "status": "READY"
    },
    {
      "title": "1 - Aristas \u0026 vértices que forman triángulos dirigidos",
      "text": "%pyspark\n\ntwGraphTriangle \u003d graph.find(\"(a)-[e1]-\u003e(b); (b)-[e2]-\u003e(c); (c)-[e3]-\u003e(a)\")\n\n\ndataframe \u003d twGraphTriangle.select(\"*\")\n\nz.show(dataframe.limit(10))\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 23:25:18.975",
      "progress": 9,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a": "string",
                      "e1": "string",
                      "b": "string",
                      "e2": "string",
                      "c": "string",
                      "e3": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a\te1\tb\te2\tc\te3\n[ngelDavidNieva1]\t[ngelDavidNieva1,ngelDavidNieva1,30,2]\t[ngelDavidNieva1]\t[ngelDavidNieva1,ngelDavidNieva1,30,2]\t[ngelDavidNieva1]\t[ngelDavidNieva1,ngelDavidNieva1,30,2]\n[ONCA_TvR_Arg]\t[ONCA_TvR_Arg,ONCA_TvR_Arg,2,1]\t[ONCA_TvR_Arg]\t[ONCA_TvR_Arg,ONCA_TvR_Arg,2,1]\t[ONCA_TvR_Arg]\t[ONCA_TvR_Arg,ONCA_TvR_Arg,2,1]\n[dccolectivo]\t[dccolectivo,judrh,2,1]\t[judrh]\t[judrh,mamibel09,8,1]\t[mamibel09]\t[mamibel09,dccolectivo,35,1]\n[agapearg51]\t[agapearg51,GabrielaMasista,58,1]\t[GabrielaMasista]\t[GabrielaMasista,adrianapellaca1,108,3]\t[adrianapellaca1]\t[adrianapellaca1,agapearg51,30,1]\n[rodolfoCeniz]\t[rodolfoCeniz,RuthPizzi,5,1]\t[RuthPizzi]\t[RuthPizzi,PabloMGener,41,1]\t[PabloMGener]\t[PabloMGener,rodolfoCeniz,42,1]\n[SandraDocente]\t[SandraDocente,C_Echegoyen,108,3]\t[C_Echegoyen]\t[C_Echegoyen,RipamontiRita,280,2]\t[RipamontiRita]\t[RipamontiRita,SandraDocente,15,1]\n[donofriojorge]\t[donofriojorge,waltervazquez21,18,3]\t[waltervazquez21]\t[waltervazquez21,GurtzDario,7,1]\t[GurtzDario]\t[GurtzDario,donofriojorge,11,1]\n[donofriojorge]\t[donofriojorge,waltervazquez21,18,3]\t[waltervazquez21]\t[waltervazquez21,donofriojorge,11,1]\t[donofriojorge]\t[donofriojorge,donofriojorge,44,4]\n[donofriojorge]\t[donofriojorge,waltervazquez21,18,3]\t[waltervazquez21]\t[waltervazquez21,Florenc32693350,6,1]\t[Florenc32693350]\t[Florenc32693350,donofriojorge,11,1]\n[formacionIB]\t[formacionIB,formacionIB,6,1]\t[formacionIB]\t[formacionIB,CooperacionIB,6,1]\t[CooperacionIB]\t[CooperacionIB,formacionIB,12,2]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d107"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d108"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d109"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d110"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d111"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d112"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668380596911_119183307",
      "id": "paragraph_1668380596911_119183307",
      "dateCreated": "2022-11-13 23:03:16.911",
      "dateStarted": "2022-11-13 23:18:13.162",
      "dateFinished": "2022-11-13 23:18:16.199",
      "status": "FINISHED"
    },
    {
      "title": "2 - Retweets triangulares de usuarios distintos",
      "text": "%pyspark\n\ntwGraphTriDistinct \u003d dataframe.filter(\"a.id !\u003d b.id\").filter(\"b.id !\u003d c.id\").filter(\"c.id !\u003d a.id\")\n\nz.show(twGraphTriDistinct.limit(10))\n\n# La respuesta es sí, hay casos donde los 3 usuarios sean distintos.\n\n# Acto siguiente calculamos cuántos de estos casos tenemos.\n\nedge_ab \u003d twGraphTriDistinct.select(\"e1.src\", \"e1.dst\")\nedge_bc \u003d twGraphTriDistinct.select(\"e2.src\", \"e2.dst\")\nedge_ca \u003d twGraphTriDistinct.select(\"e3.src\", \"e3.dst\")\n\n# Obtenemos todas las aristas\ne_triangle_all \u003d edge_ab.union(edge_bc).union(edge_ca).distinct()\n\n# Obtenemos todos los vértices\nv_triangle_all_s \u003d e_triangle_all.select(col(\"src\").alias(\"id\"))\nv_triangle_all_d \u003d e_triangle_all.select(col(\"dst\").alias(\"id\"))\nv_triangle_all \u003d v_triangle_all_s.union(v_triangle_all_d).distinct()\n\n\nprint(f\"El grafo tiene {e_triangle_all.count()} aristas y {v_triangle_all.count()} vértices\")\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 23:58:55.443",
      "progress": 94,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a": "string",
                      "e1": "string",
                      "b": "string",
                      "e2": "string",
                      "c": "string",
                      "e3": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a": "string",
                      "e1": "string",
                      "b": "string",
                      "e2": "string",
                      "c": "string",
                      "e3": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a\te1\tb\te2\tc\te3\n[dccolectivo]\t[dccolectivo,judrh,2,1]\t[judrh]\t[judrh,mamibel09,8,1]\t[mamibel09]\t[mamibel09,dccolectivo,35,1]\n[agapearg51]\t[agapearg51,GabrielaMasista,58,1]\t[GabrielaMasista]\t[GabrielaMasista,adrianapellaca1,108,3]\t[adrianapellaca1]\t[adrianapellaca1,agapearg51,30,1]\n[rodolfoCeniz]\t[rodolfoCeniz,RuthPizzi,5,1]\t[RuthPizzi]\t[RuthPizzi,PabloMGener,41,1]\t[PabloMGener]\t[PabloMGener,rodolfoCeniz,42,1]\n[SandraDocente]\t[SandraDocente,C_Echegoyen,108,3]\t[C_Echegoyen]\t[C_Echegoyen,RipamontiRita,280,2]\t[RipamontiRita]\t[RipamontiRita,SandraDocente,15,1]\n[donofriojorge]\t[donofriojorge,waltervazquez21,18,3]\t[waltervazquez21]\t[waltervazquez21,GurtzDario,7,1]\t[GurtzDario]\t[GurtzDario,donofriojorge,11,1]\n[donofriojorge]\t[donofriojorge,waltervazquez21,18,3]\t[waltervazquez21]\t[waltervazquez21,Florenc32693350,6,1]\t[Florenc32693350]\t[Florenc32693350,donofriojorge,11,1]\n[lizzieyn]\t[lizzieyn,ConCiencia2015,76,1]\t[ConCiencia2015]\t[ConCiencia2015,LaBelgrana,510,3]\t[LaBelgrana]\t[LaBelgrana,lizzieyn,20,1]\n[Carlos_AD_Viola]\t[Carlos_AD_Viola,PatriciaConti9,36,1]\t[PatriciaConti9]\t[PatriciaConti9,lilifinochietta,69,1]\t[lilifinochietta]\t[lilifinochietta,Carlos_AD_Viola,59,1]\n[ajfernandez2001]\t[ajfernandez2001,interinosMAD,52,4]\t[interinosMAD]\t[interinosMAD,JuanaSinarco3,13,1]\t[JuanaSinarco3]\t[JuanaSinarco3,ajfernandez2001,22,2]\n[ajfernandez2001]\t[ajfernandez2001,interinosMAD,52,4]\t[interinosMAD]\t[interinosMAD,AccesojustoNAD,30,2]\t[AccesojustoNAD]\t[AccesojustoNAD,ajfernandez2001,11,1]\n"
          },
          {
            "type": "TEXT",
            "data": "\nEl grafo tiene 1006 aristas y 415 vértices\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d297"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d298"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d299"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d300"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d301"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d302"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d303"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d304"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d305"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d306"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d307"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d308"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d309"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d310"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d311"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d312"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d313"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d314"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d315"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668381605145_444141598",
      "id": "paragraph_1668381605145_444141598",
      "dateCreated": "2022-11-13 23:20:05.145",
      "dateStarted": "2022-11-13 23:58:55.446",
      "dateFinished": "2022-11-13 23:59:15.015",
      "status": "FINISHED"
    },
    {
      "title": "3 - Exportamos el resultado para visualizar en Gephi",
      "text": "%pyspark\n\nv_triangle_all.select(\"*\", col(\"id\").alias(\"Label\"))\\\n        .coalesce(1) \\\n        .write \\\n        .csv(\"logs/triangle_vertices.csv\", mode\u003d\"overwrite\", header\u003dTrue)\n\ne_triangle_all.withColumnRenamed(\"src\", \"Source\")\\\n    .withColumnRenamed(\"dst\", \"Target\")\\\n    .coalesce(1) \\\n    .write \\\n    .csv(\"logs/triangle_edges.csv\", mode\u003d\"overwrite\", header\u003dTrue)\n    \n# En Gephi, la imagen correspondiente a este grafo carece de labels para poder visualizar mejor los nodos y las aristas.",
      "user": "anonymous",
      "dateUpdated": "2022-11-14 00:33:17.632",
      "progress": 98,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "src": "string",
                      "dst": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "src": "string",
                      "dst": "string"
                    },
                    "updated": true
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d316"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d317"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d318"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d319"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d320"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d321"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d322"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d323"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d324"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d325"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d326"
            },
            {
              "jobUrl": "http://localhost:4040/jobs/job?id\u003d327"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668381932657_1230705462",
      "id": "paragraph_1668381932657_1230705462",
      "dateCreated": "2022-11-13 23:25:32.657",
      "dateStarted": "2022-11-13 23:59:12.708",
      "dateFinished": "2022-11-13 23:59:35.552",
      "status": "FINISHED"
    },
    {
      "title": "FIN",
      "text": "val baseDir\u003d\"https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases\"\n\nz.put(\"baseDir\", baseDir)\nprint(\"\"\"%html\n\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n\"\"\")\n",
      "user": "anonymous",
      "dateUpdated": "2022-11-13 21:09:22.281",
      "progress": 0,
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "baseDir: String \u003d https://git.cs.famaf.unc.edu.ar/dbarsotti/diplodatos_bigdata/raw/master/clases\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1668373762281_770485137",
      "id": "20171010-191336_1667301043",
      "dateCreated": "2022-11-13 21:09:22.281",
      "status": "READY"
    }
  ],
  "name": "Clase 07 - Grandes Grafos Sociales",
  "id": "2HKT94C3P",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}